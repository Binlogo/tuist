Dir="$(pwd -P)"
BuildDir="$Dir/Build"
FrameworkPrefix="Framework"
FrameworkName="$FrameworkPrefix.framework"
XCFrameworkDir="$BuildDir/$XCFrameworkName"
DerivedDataDir="$BuildDir/DerivedData"
XcodeBuildArchiveCommonArgs="-project FrameworkWithSwiftMacro.xcodeproj
 -scheme "$FrameworkPrefix" \
 -skipMacroValidation \
 -showBuildTimingSummary \
 -derivedDataPath $DerivedDataDir \
 CODE_SIGN_IDENTITY= \
 CODE_SIGNING_REQUIRED=NO \
 BUILD_LIBRARY_FOR_DISTRIBUTION=YES"

rm -rf Build
set -e

# TuistWorkspace dir
pushd ../..
tuist fetch && tuist generate --no-open
popd

# Archive for iOS Devices
echo
echo Archiving for iOS devices...
echo

xcodebuild archive \
  $XcodeBuildArchiveCommonArgs \
  -destination "generic/platform=iOS" \
  -archivePath "Build/archives/ios_devices.xcarchive" | xcpretty

# Archive for iOS Simulators
echo
echo Archiving for iOS simulators...
echo

xcodebuild archive \
  $XcodeBuildArchiveCommonArgs \
  -destination "generic/platform=iOS Simulator" \
  -archivePath "Build/archives/ios_simulators.xcarchive" | xcpretty

echo
echo Stripping bitcode from libswift_Concurrency.dylib
echo
# Find the bitcode_strip tool
bitcode_strip=`xcrun -sdk iphoneos --find bitcode_strip`
# Run it on all of the copies of libswift_Concurrency.dylib in the archive dir.
find Build/archives -name 'libswift_Concurrency.dylib' -print0 | xargs -0 -I {} $bitcode_strip {} -m -o {}

echo Generating xcframeworks...
echo

# For each .framework generated by the archive commands above,
# build a corresponding xcframework from the two architecture slices.
find $BuildDir/archives/ios_devices.xcarchive/Products/Library/Frameworks -name '*.framework' > $BuildDir/frameworks.txt
while read p; do
  BaseFrameworkName=$(basename $p .framework)
  FrameworkName=$BaseFrameworkName.framework
  XCFrameworkName=$BaseFrameworkName.xcframework
  DeviceArchive=$BuildDir/archives/ios_devices.xcarchive
  SimulatorArchive=$BuildDir/archives/ios_simulators.xcarchive
  DeviceSymbols=$DeviceArchive/dSYMS/$FrameworkName.dSYM
  DeviceSymbolsSwitch=""
  SimulatorSymbols=$SimulatorArchive/dSYMS/$FrameworkName.dSYM
  SimulatorSymbolsSwitch=""
  if [ -d "$DeviceSymbols" ]; then
    DeviceSymbolsSwitch="-debug-symbols $DeviceSymbols"
  fi
  if [ -d "$SimulatorSymbols" ]; then
    SimulatorSymbolsSwitch="-debug-symbols $SimulatorSymbols"
  fi
  echo
  echo Creating $XCFrameworkName...
  xcodebuild -create-xcframework \
  -framework $DeviceArchive/Products/Library/Frameworks/$FrameworkName \
  $DeviceSymbolsSwitch \
  -framework $SimulatorArchive/Products/Library/Frameworks/$FrameworkName \
  $SimulatorSymbolsSwitch \
  -output $BuildDir/xcframeworks/$(basename $XCFrameworkName)
done <$BuildDir/frameworks.txt